name: Claude Code Review

on:
  # Comment-based triggers (like Cursor's Bugbot)
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request:
    types: [opened, synchronize]

  # Manual triggers via GitHub CLI
  workflow_dispatch:
    inputs:
      review_mode:
        description: 'Review mode to use'
        required: false
        default: 'hunt'
        type: choice
        options:
          - hunt
          - analyze
          - security
          - performance
          - review
      focus:
        description: 'Focus areas (comma-separated)'
        required: false
        default: 'bugs,security,performance'
        type: string
      verbose:
        description: 'Enable verbose output'
        required: false
        default: false
        type: boolean

jobs:
  # Handle workflow_dispatch by creating a comment to trigger Claude
  dispatch-trigger:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
    steps:
      - name: Find open PR
        id: find-pr
        run: |
          # Find the most recent open PR for this branch
          PR_NUMBER=$(gh pr list --repo ${{ github.repository }} --state open --head ${{ github.ref_name }} --json number --jq '.[0].number // empty')
          if [ -z "$PR_NUMBER" ]; then
            echo "No open PR found for branch ${{ github.ref_name }}"
            exit 1
          fi
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create trigger comment
        run: |
          COMMENT_BODY="codebot ${{ github.event.inputs.review_mode || 'hunt' }}"
          if [ "${{ github.event.inputs.verbose }}" = "true" ]; then
            COMMENT_BODY="$COMMENT_BODY verbose"
          fi

          gh pr comment ${{ steps.find-pr.outputs.pr_number }} --repo ${{ github.repository }} --body "$COMMENT_BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  claude:
    # Only run on comment triggers or specific PR conditions
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, 'codebot')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, 'codebot')) ||
      (github.event_name == 'pull_request' && (
        github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' ||
        contains(github.event.pull_request.title, '[auto-review]')
      ))

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Parse comment command
        id: parse-command
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          # Default values
          echo "mode=review" >> $GITHUB_OUTPUT
          echo "focus=code-quality,security,performance" >> $GITHUB_OUTPUT
          echo "verbose=false" >> $GITHUB_OUTPUT
          echo "include_tests=true" >> $GITHUB_OUTPUT

          # Parse comment content for commands
          if [ "${{ github.event_name }}" == "issue_comment" ] || [ "${{ github.event_name }}" == "pull_request_review_comment" ]; then
            COMMENT="$COMMENT_BODY"

            # Extract command and parameters
            if echo "$COMMENT" | grep -qi "codebot hunt"; then
              echo "mode=hunt" >> $GITHUB_OUTPUT
              echo "focus=bugs,security,performance" >> $GITHUB_OUTPUT
              echo "verbose=false" >> $GITHUB_OUTPUT
            elif echo "$COMMENT" | grep -qi "codebot analyze"; then
              echo "mode=analyze" >> $GITHUB_OUTPUT
              echo "focus=architecture,patterns,complexity" >> $GITHUB_OUTPUT
              echo "verbose=true" >> $GITHUB_OUTPUT
            elif echo "$COMMENT" | grep -qi "codebot security"; then
              echo "mode=security" >> $GITHUB_OUTPUT
              echo "focus=security,vulnerabilities,compliance" >> $GITHUB_OUTPUT
              echo "verbose=true" >> $GITHUB_OUTPUT
            elif echo "$COMMENT" | grep -qi "codebot performance"; then
              echo "mode=performance" >> $GITHUB_OUTPUT
              echo "focus=performance,optimization,bottlenecks" >> $GITHUB_OUTPUT
              echo "verbose=true" >> $GITHUB_OUTPUT
            elif echo "$COMMENT" | grep -qi "codebot review"; then
              echo "mode=review" >> $GITHUB_OUTPUT
              echo "focus=code-quality,security,performance" >> $GITHUB_OUTPUT
              echo "verbose=true" >> $GITHUB_OUTPUT
            elif echo "$COMMENT" | grep -qi "codebot"; then
              # Default to hunt mode for simple "codebot" command
              echo "mode=hunt" >> $GITHUB_OUTPUT
              echo "focus=bugs,security,performance" >> $GITHUB_OUTPUT
              echo "verbose=false" >> $GITHUB_OUTPUT
            fi

            # Check for verbose flag
            if echo "$COMMENT" | grep -qi "verbose\|detailed"; then
              echo "verbose=true" >> $GITHUB_OUTPUT
            fi

            # Check for specific focus areas
            if echo "$COMMENT" | grep -qi "security"; then
              echo "focus=security,vulnerabilities,compliance" >> $GITHUB_OUTPUT
            elif echo "$COMMENT" | grep -qi "performance"; then
              echo "focus=performance,optimization,bottlenecks" >> $GITHUB_OUTPUT
            elif echo "$COMMENT" | grep -qi "tests"; then
              echo "focus=test-coverage,test-quality" >> $GITHUB_OUTPUT
            fi
          fi



      - name: Run Claude Code Review
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Terraform-specific tools for validation and testing
          allowed_tools: "Bash(terraform fmt -check),Bash(terraform validate),Bash(tflint),Bash(pre-commit run --all-files)"

          # Dynamic prompt based on review mode with Cognito User Pool-specific focus
          direct_prompt: |
            You are reviewing a Terraform AWS Cognito User Pool module. Focus on identity and access management best practices.

            ${{ steps.parse-command.outputs.mode == 'hunt' && format('
            üïµÔ∏è BUG HUNT MODE - Find Cognito User Pool issues quickly:
            - Focus on critical bugs, security vulnerabilities, and performance issues
            - Prioritize identity/authentication security issues
            - Check for improper resource configurations
            - Validate MFA and password policy settings
            - Review client configuration and auth flows
            - Be concise and actionable
            ') || '' }}

            ${{ steps.parse-command.outputs.mode == 'analyze' && format('
            üìä ANALYSIS MODE - Deep Cognito User Pool analysis:
            - Analyze Terraform module architecture and patterns
            - Evaluate resource organization and dependencies
            - Assess backward compatibility and API design
            - Review for_each vs count usage patterns
            - Consider scalability and maintainability
            - Validate input variable design and validation
            - Check output value completeness
            ') || '' }}

            ${{ steps.parse-command.outputs.mode == 'security' && format('
            üîí SECURITY MODE - Cognito User Pool security review:
            - Identity and access management security patterns
            - User authentication and authorization flows
            - Multi-factor authentication (MFA) configuration
            - Password policies and account lockout settings
            - Identity provider federation security
            - Token expiration and refresh policies
            - User pool client security configurations
            - Data privacy and compliance (GDPR, CCPA)
            - Encryption at rest and in transit
            - IAM roles and permissions validation
            ') || '' }}

            ${{ steps.parse-command.outputs.mode == 'performance' && format('
            ‚ö° PERFORMANCE MODE - Cognito User Pool performance review:
            - Resource provisioning efficiency
            - Terraform state management optimization
            - Module execution performance
            - Resource dependency optimization
            - Consider scaling implications
            - Review resource creation patterns
            - Validate conditional resource creation
            ') || '' }}

            ${{ steps.parse-command.outputs.mode == 'review' && format('
            üìù STANDARD REVIEW MODE - Comprehensive Cognito User Pool review:
            
            ## Core Focus Areas:
            - **Infrastructure as Code**: Terraform best practices and module design
            - **Identity Security**: Authentication flows, MFA, password policies
            - **Schema Management**: Custom attributes and user data validation
            - **Client Configuration**: App client settings and security
            - **UI Customization**: Branding and user experience compliance
            - **Federation**: Identity provider integration security
            - **Compliance**: Data privacy and regulatory requirements
            
            ## Terraform Module Patterns:
            - Use for_each over count for resource management
            - Validate input variables appropriately
            - Maintain backward compatibility
            - Follow CLAUDE.md development guidelines
            
            Focus areas: {0}
            Verbose output: {1}
            
            Be constructive and helpful with specific Cognito User Pool context.
            ', steps.parse-command.outputs.focus, steps.parse-command.outputs.verbose) || '' }}

          # Use sticky comments for better UX
          use_sticky_comment: true

      - name: Workflow Summary
        if: always()
        run: |
          echo "## ü§ñ Claude Code Review for Cognito User Pool Module" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Review Mode:** \`${{ steps.parse-command.outputs.mode }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Focus Areas:** \`${{ steps.parse-command.outputs.focus }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Verbose Output:** \`${{ steps.parse-command.outputs.verbose }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Available Codebot Commands" >> $GITHUB_STEP_SUMMARY
          echo "Comment any of these in PRs to trigger Cognito User Pool-specific reviews:" >> $GITHUB_STEP_SUMMARY
          echo "- \`codebot hunt\` - Quick bug detection for identity/auth issues" >> $GITHUB_STEP_SUMMARY
          echo "- \`codebot analyze\` - Deep Terraform module analysis" >> $GITHUB_STEP_SUMMARY
          echo "- \`codebot security\` - Identity & access management security review" >> $GITHUB_STEP_SUMMARY
          echo "- \`codebot performance\` - Terraform performance optimization" >> $GITHUB_STEP_SUMMARY
          echo "- \`codebot review\` - Comprehensive Cognito User Pool review" >> $GITHUB_STEP_SUMMARY
          echo "- \`codebot\` - Defaults to hunt mode" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîê Cognito-Specific Focus Areas" >> $GITHUB_STEP_SUMMARY
          echo "- Identity & authentication security patterns" >> $GITHUB_STEP_SUMMARY
          echo "- MFA and password policy configurations" >> $GITHUB_STEP_SUMMARY
          echo "- User pool client security settings" >> $GITHUB_STEP_SUMMARY
          echo "- Federation and identity provider integration" >> $GITHUB_STEP_SUMMARY
          echo "- Data privacy and compliance (GDPR, CCPA)" >> $GITHUB_STEP_SUMMARY
          echo "- Terraform for_each vs count patterns" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Manual Triggers" >> $GITHUB_STEP_SUMMARY
          echo "Run via GitHub CLI:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "gh workflow run claude-code-review.yml -f review_mode=hunt" >> $GITHUB_STEP_SUMMARY
          echo "gh workflow run claude-code-review.yml -f review_mode=security -f verbose=true" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
